<?php

// This is the name of the cookie. You can change it if you want.
define('LANGUAGE_COOKIE_KEY', 'language_prefix');

/**
 * Implements hook_menu().
 */
function i18n_selection_page_menu() {
  $items = array();

  $items['admin/settings/language/i18n/selection_page'] = array(
    'title' => 'Language selection page',
    'description' => 'Configure the language selection page behavior',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('i18n_selection_page_admin'),
    'access arguments' => array('access administration pages'),
    'file' => 'i18n_selection_page.admin.inc',
    'type' => MENU_LOCAL_TASK
  );

  $items['language_selection'] = array(
    'description' => 'Language selection page',
    'page callback' => 'i18n_selection_page_selection_page',
    'access arguments' => array('access content'),
    'file' => 'i18n_selection_page.pages.inc',
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

/**
 * Implements hook_init().
 */
function i18n_selection_page_init() {
  global $language;

  if (variable_get('language_negotiation', LANGUAGE_NEGOTIATION_NONE) != 2) return;

  $lang_list = language_list('enabled');
  $lang_list = $lang_list[1];

  if (count($lang_list) < 2) return;

  $black_paths = variable_get('i18n_selection_page_blacklisted_paths', array());

  if ((bool)drupal_match_path($_GET['q'], implode("\r\n", $black_paths))) return;
  if ($_GET['q'] == 'language_selection') return;
  if (!isset($_SERVER['SERVER_ADDR'])) return;

  // This setting is calculate this way so I only have one switch for all.
  $behavior = (int)variable_get('i18n_selection_page_use_language_cookie', 8) + variable_get('i18n_selection_page_enable', 2);

  module_load_include('inc', 'i18n_selection_page', 'includes/i18n_selection_page.helpers');

  $url_parsed = _i18n_selection_page_parse_url_custom();

  $lang_from_url = _i18n_detect_lang_from_url();
  $lang_from_cookie = _i18n_detect_lang_from_cookie();

  $language = _i18n_resolve_lang($lang_from_url, $lang_from_cookie);

  if (variable_get('i18n_selection_page_use_language_cookie', 8) == 16) {
    $isCookieOk = setcookie(LANGUAGE_COOKIE_KEY, $language->language, time() + variable_get('i18n_selection_page_cookie_lifetime', 60 * 60 * 24 * 30), '/');
    //drupal_set_message('Cookie set to '.$language->language);
  }
  else {
    setcookie(LANGUAGE_COOKIE_KEY, NULL, 0, '/');
  }

  if ($lang_from_url) return;

  $query = array();
  $query['destination'] = $_GET['q'];
  $query = array_merge((array)$query, (array)$url_parsed['query']);
  unset($query['q']);

  $destination = NULL;

  switch ($behavior) {
    case 9:
    case 10:
    case 18:
      $destination = NULL;
      break;
    case 17:
      unset($query['destination']);
      $destination = $_GET['q'];
      if ($lang_from_cookie) {
        unset($query['destination']);
        break;
      }
    case 12:
    case 20:
      $destination = 'language_selection';
      break;
  }


  if ($destination) {
    //echo "Redirect to: ".url($destination, $query);
    drupal_goto($destination, $query);
  }
}

/**
 * Implements hook_theme().
 */
function i18n_selection_page_theme() {
  return array(
    'i18n_selection_page' => array(
      'arguments' => array('data' => array()),
      'template' => 'i18n_selection_page'
    ),
  );
}

/*
 * Implementation of hook_requirements().
 */
function i18n_selection_page_requirements($phase) {
  $lang_default = language_default();
  $t = get_t();

  $requirements = array();

  if (!$lang_default->prefix) {
    $link = l($lang_default->native, 'admin/settings/language/edit/' . $lang_default->language);
    $requirements['i18n_selection_page'] = array(
      'title' => 'I18N Selection Page',
      'value' => $t('You should enable a prefix on the default language:') . ' ' . $link,
      'severity' => REQUIREMENT_WARNING
    );
  }
  else {
    $requirements['i18n_selection_page'] = array(
      'title' => 'I18N Selection Page',
      'value' => $t('All your enabled languages have language prefix, all good.'),
      'severity' => REQUIREMENT_OK
    );
  }

  return $requirements;
}