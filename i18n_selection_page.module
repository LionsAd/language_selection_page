<?php

define('LANGUAGE_NEGOTIATION_SELECTION_PAGE', 'language-selection-page');

/**
 * Implements hook_menu().
 */
function i18n_selection_page_menu() {
  $items = array();

  $items['admin/config/regional/language/configure/selection_page'] = array(
    'title' => 'Language selection page',
    'description' => 'Configure the language selection page behavior',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('i18n_selection_page_admin'),
    'access arguments' => array('administer languages'),
    'file' => 'i18n_selection_page.admin.inc',
    'type' => MENU_VISIBLE_IN_BREADCRUMB
  );

  $items['language_selection'] = array(
    'description' => 'Language selection page',
    'page callback' => 'i18n_selection_page_selection_page',
    'access arguments' => array('access content'),
    'file' => 'i18n_selection_page.pages.inc',
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

function i18n_selection_page_language_types_info() {
}

/**
 * Implementation of hook_language_negotiation_info().
 *
 * @return void
 */
function i18n_selection_page_language_negotiation_info() {

  $language_providers[LANGUAGE_NEGOTIATION_SELECTION_PAGE] = array(
    'types' => array(LANGUAGE_TYPE_CONTENT, LANGUAGE_TYPE_INTERFACE, LANGUAGE_TYPE_URL),
    'callbacks' => array(
      'language' => 'locale_language_from_url',
      'switcher' => 'locale_language_switcher_url',
      'url_rewrite' => 'locale_language_url_rewrite_url'
    ),
    'file' => drupal_get_path('module', 'i18n_selection_page') . '/i18n_selection_page.module',
    'weight' => 50,
    'name' => t('Selection Page'),
    'description' => t('Use a Selection Page to the visitor to choose it\'s language.'),
    'config' => 'admin/config/regional/language/configure/selection_page'
  );

  return $language_providers;
}

function i18n_selection_page_language_negotiation_info_alter(array &$language_providers) {
  static $set = NULL;

  $types = language_types();

  if ($set == NULL) {
    $language_provider = $language_providers;
    //echo "<pre>".print_r($language_providers, 1)."</pre>";
    //$language_providers['LANGUAGE_NEGOTIATION_SELECTION_PAGE']['callbacks']['language'] = _i18n_selection_page_cb();
  }
}

function i18n_selection_page_url_rewrite_selection_page(&$path, &$options) {
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['languages'] = &drupal_static(__FUNCTION__);
  }
  $languages = &$drupal_static_fast['languages'];

  if (!isset($languages)) {
    $languages = language_list('enabled');
    $languages = array_flip(array_keys($languages[1]));
  }

  if (isset($options['language'])) {
    if (!empty($options['language']->prefix)) {
      $options['prefix'] = $options['language']->prefix . '/';
    }
  }
}

// Faire un alter du premier hook qui trouve le language et analyser l'url à partir de là.
// Ensuite continuer le process.

function i18n_selection_page_language_from_url($languages) {
  // Detect language from URL
  $language_from_url = FALSE;
  list($language, $_GET['q']) = language_url_split_prefix(isset($_GET['q']) ? request_path() : NULL, $languages);
  if ($language !== FALSE) {
    $language_from_url = $language->language;
    //drupal_set_message("Language from url found: " . $language->language);
    return $language_from_url;
  } else {
    //drupal_set_message("No language found from url.");
    return LANGUAGE_NONE;
    //return language_default()->language;
  }
}
/*
function _i18n_selection_page_prefix($language = NULL) {
  static $prefix_language = NULL;
  if (!empty($language)) {
    echo "Setting to $language";
    $prefix_language = $language;
  }
  return $prefix_language;
}
*/

/**
 * Implements hook_init().
 */
function i18n_selection_page_init() {

  if (!language_negotiation_get_any(LANGUAGE_NEGOTIATION_SELECTION_PAGE)) {
    drupal_set_message("i18n selection page disabled.");
    return TRUE;
  }

  $language = $GLOBALS['language'];
  $error = FALSE;

  // Some checks
  if ($_GET['q'] == 'language_selection') $error = TRUE;
  if (!isset($_SERVER['SERVER_ADDR'])) $error = TRUE;

  if (!isset($language->provider) || $language->provider != LOCALE_LANGUAGE_NEGOTIATION_URL_FALLBACK) return;

  // Work on query
  $query = drupal_get_query_parameters();
  $query['destination'] = $_GET['q'];

  $url = url('language_selection', array('query' => $query, 'absolute' => FALSE, 'language' => LANGUAGE_NONE));

  if (!$error) {
    //drupal_set_message("Redirect to $url",'warning');
    drupal_goto('language_selection', array('query' => $query, 'absolute' => FALSE, 'language' => LANGUAGE_NONE));
    //header("Location: $url");
    //exit;
  }
}

function i18n_selection_page_language_initialize() {
  $types = language_types();

  // Ensure the language is correctly returned, even without multilanguage
  // support. Also make sure we have a $language fallback, in case a language
  // negotiation callback needs to do a full bootstrap.
  // Useful for eg. XML/HTML 'lang' attributes.
  $default = language_default();
  foreach ($types as $type) {
    //$GLOBALS[$type] = $default;
  }
  if (drupal_multilingual()) {
    include_once DRUPAL_ROOT . '/includes/language.inc';
    foreach ($types as $type) {
      dpm(i18n_language_initialize($type), "language_initialize($type)");
      $GLOBALS[$type] = i18n_language_initialize($type);
    }
  }
}

function i18n_language_initialize($type) {
  // Execute the language providers in the order they were set up and return the
  // first valid language found.
  $negotiation = variable_get("language_negotiation_$type", array());
  //echo "<pre>NEGOTIATION TYPE:".$type."</pre>";

  foreach ($negotiation as $id => $provider) {
    $language = language_provider_invoke($id, $provider);
    /*echo "<pre>ID:".print_r($id,1)."</pre>";
    echo "<pre>PROVIDER:".print_r($provider,1)."</pre>";
    echo "<pre>LANGUAGE:".print_r($language,1)."</pre>";
    */
    if ($language && $id != 'language-selection-page') {
      //$language->provider = $id;
      return $language;
    }
  }

  // If no other language was found use the default one.
  return language_default();
}

/**
* Implements hook_theme().
*/

function i18n_selection_page_theme() {
  return array(
    'i18n_selection_page' => array(
      'arguments' => array('data' => array()),
      'path' => drupal_get_path('module', 'i18n_selection_page') . '/themes',
      //'file' => '/i18n_selection_page.pages.inc',
      'template' => 'i18n_selection_page'
    ),
    'i18n_selection_page_body' => array(
      'arguments' => array('data' => array()),
      'path' => drupal_get_path('module', 'i18n_selection_page') . '/themes',
      //'file' => 'i18n_selection_page.pages.inc',
      'template' => 'i18n_selection_page_body'
    )
  );
}

/**
 * Implementation of hook_requirements().
 */
/*
function i18n_selection_page_requirements($phase) {
  module_load_include('inc', 'i18n_selection_page', 'includes/i18n_selection_page.helpers');

  $requirements = array();
  $t = get_t();
  $lang_list = language_list('enabled');
  $messages = _i18n_selection_page_error_messages();
  $language_count = _i18n_selection_page_check_language_count();

  if (variable_get('language_negotiation', LANGUAGE_NEGOTIATION_NONE) != 2) {
    $requirements['i18n_selection_page'] = array(
      'title' => 'I18N Selection Page',
      'value' => $t($messages['language_negotiation'], array(
                                                            '%setting_name' => t('Language negotiation'),
                                                            '%setting_value' => t('Path prefix with language fallback.'),
                                                            '@setting_url' => url('admin/settings/language/configure'),
                                                       )),
      'severity' => REQUIREMENT_ERROR
    );
    return $requirements;
  }

  if ($language_count['db'] != $language_count['vars']) {
    $requirements['i18n_selection_page'] = array(
      'title' => 'I18N Selection Page',
      'value' => $t($messages['language_count'], array('@language_count_db' => $language_count['db'], '@language_count_vars' => $language_count['vars'])),
      'severity' => REQUIREMENT_ERROR
    );
    return $requirements;
  }

  if ($language_count['db'] > 1) {
    $lang_list_without_prefix = array();
    foreach ($lang_list[1] as $lang) {
      if (empty($lang->prefix)) {
        $lang_list_without_prefix[$lang->language] = $t($messages['language_prefix'], array('@language_url' => url('admin/settings/language/edit/' . $lang->language), '@language_name' => $lang->name));
      }
    }
    if (count($lang_list_without_prefix) >= 1) {
      $requirements['i18n_selection_page'] = array(
        'title' => 'I18N Selection Page',
        'value' => implode('<br/>', $lang_list_without_prefix),
        'severity' => REQUIREMENT_WARNING
      );
    }
    else {
      $requirements['i18n_selection_page'] = array(
        'title' => 'I18N Selection Page',
        'value' => t($messages['language_all_good']),
        'severity' => REQUIREMENT_OK
      );
    }
  } else {
    $link = url('admin/settings/language');
    $requirements['i18n_selection_page'] = array(
      'title' => 'I18N Selection Page',
      'value' => $t($messages['language_only_one'], array('@link' => $link)),
      'severity' => REQUIREMENT_WARNING
    );
  }

  return $requirements;
}
*/