<?php

// This is the name of the cookie. You can change it if you want.
define('LANGUAGE_COOKIE_KEY', 'language_prefix');

/**
 * Implements hook_menu().
 */
function i18n_selection_page_menu() {
  $items = array();

  $items['admin/settings/language/i18n/selection_page'] = array(
    'title' => t('Language selection page'),
    'description' => t('Configure the language selection page behavior'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('i18n_selection_page_admin'),
    'access arguments' => array('access administration pages'),
    'file' => 'i18n_selection_page.admin.inc',
    'type' => MENU_LOCAL_TASK
  );

  $items['language_selection'] = array(
    'description' => t('Language selection page'),
    'page callback' => 'i18n_selection_page_page',
    'access arguments' => array('access content'),
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

/**
 * Implements hook_init().
 *
 */
function i18n_selection_page_init() {
  global $language;

  $lang_list       = language_list('enabled');
  $lang_list       = $lang_list[1];

  $black_paths     = variable_get('i18n_selection_page_blacklisted_paths', array());
  $cookie_behavior = variable_get('i18n_selection_page_use_language_cookie', 0);
  $select_page_type = variable_get('i18n_selection_page_enable', 0);

  $url_parsed       = _i18n_selection_page_parse_url_custom();

  $lang_from_cookie = _i18n_detect_lang_from_cookie();    
  $lang_from_url    = _i18n_detect_lang_from_url($url_parsed);

  if ((bool)drupal_match_path($_GET['q'], implode("\r\n", $black_paths))) return FALSE;
  if ($_GET['q'] == 'language_selection') return FALSE;
  if (!isset($_SERVER['SERVER_ADDR'])) return FALSE;

  $language = _i18n_resolve_lang($lang_from_url, $lang_from_cookie);
  
  if ($cookie_behavior == 1) {
    $isCookieOk = setcookie(LANGUAGE_COOKIE_KEY, $language->language, time() + variable_get('i18n_selection_page_cookie_lifetime', 60 * 60 * 24 * 30), '/');
  }

  $query = array();
  $query['destination'] = $_GET['q'];
  $query = array_merge((array)$query, (array)$url_parsed['query']);
  unset($query['q']);

  $destination = FALSE;

  if (!$lang_from_url) {
    switch ($select_page_type) {
      case 0:
        unset($query['destination']);
        $destination = (isset($lang_from_cookie)) ? $_GET['q'] : NULL;
      break;
      case 1:
        $destination = $_GET['q'];
      break;
      case 2:
        $destination = 'language_selection';
      break;
    }
  
    if ($destination) {
      drupal_goto($destination, $query);
    }
  }
}

/**
 * Implements hook_theme().
 *
 */
function i18n_selection_page_theme() {
  return array(
    'i18n_selection_page' => array(
      'arguments' => array('data' => array()),
      'template' => 'i18n_selection_page'
    ),
  );
}

/**
 * Menu callback to display the selection page.
**/
function i18n_selection_page_page() {

  $url_parsed = _i18n_selection_page_parse_url_custom();
  $query = $url_parsed['query'];
  $from = $query['destination'];

  unset($query['q']);
  unset($query['destination']);

  $query_args = array();
  foreach ($query as $key => $value) {
    $query_args[] = $key . '=' . $value;
  }  
  $query_str = implode('&', $query_args);

  $nulllang = new stdClass;
  $link_text = url($from, array('query' => $query_str, 'language' => $nulllang));
  $data['from_link'] = l($link_text, $from, array('query' => $query_str, 'language' => $nulllang));

  foreach (language_list() as $prefix => $language) {
    if ($language->prefix == NULL) {
      continue;
    }

    $link_text = ucfirst(strtolower(t('Continue in ', array(), $language->language))) . $language->native;
    $items[$language->language] = l($link_text, $from, array('query' => $query_str, 'language' => $language));

    $links_items[$language->language] = $link_url;
  }

  $data['links'] = $items;
  $data['links_items'] = $links_items;

  $redirect_type = variable_get('i18n_selection_page_redirect_type', 0);
  switch ($redirect_type) {
    case 1:
      return theme('i18n_selection_page', $data);
      break;
    case 2:
      print theme('i18n_selection_page', $data);
      exit;
  }
}


/**
 * Custom function to parse a URL.
**/
function _i18n_selection_page_parse_url_custom() {

  $array_url = parse_url($_REQUEST['q'] .'?'. $_SERVER['QUERY_STRING']);

  if (isset($array_url['query'])) {
    parse_str($array_url['query'], $array_url['query']);
  }

  return $array_url;
}


/**
 * Custom function who return the first argument which is not null.
 * If all arguments are null, it returns the defaut lang.
**/
function _i18n_resolve_lang() {
  foreach (func_get_args() as $arg) {
    if (!is_null($arg)) {
      return $arg;
    }
  }
  return language_default();
}

/**
 * Custom function who detect the language from URL.
**/
function _i18n_detect_lang_from_url($url_parsed) {
  $path      = explode('/', $url_parsed['path']);

  $lang_list = language_list('enabled');
  $lang_list = $lang_list[1];

  foreach ($lang_list as $lang) {
    if (!empty($lang->prefix) && $lang->prefix == $path[0]) {
      return $lang;
    }
  }

  return NULL;

}

/**
 * Custom function who detect the language from a cookie.
**/
function _i18n_detect_lang_from_cookie() {
  $lang_list = language_list('enabled');
  $lang_list = $lang_list[1];

  foreach ($lang_list as $lang) {
    if (!empty($lang->prefix) && $lang->prefix == $_COOKIE[LANGUAGE_COOKIE_KEY]) {
      return $lang;
    }
  }

  return NULL;

}
